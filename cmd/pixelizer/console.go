package main

import (
	"image"
	"image/color/palette"
	"image/draw"
	"log"
	"os"
	"strconv"
)

const (
	// NONE means no log level set.
	NONE = iota
	// DEBUG means debug log level.
	DEBUG
	// INFO means info log level.
	INFO
)

// LogLevel is level of log output.
var LogLevel = NONE

func param(index int) int {
	logIfVerbose(DEBUG, "param[ %v ]", index)
	var nb int
	var err error
	if len(os.Args) < (index + 1) {
		return 1
	}
	if os.Args[index] != "" {
		nb, err = strconv.Atoi(os.Args[index])
		if err != nil {
			nb = 1
		}
	} else {
		nb = 1
	}
	return nb
}

func hasParam(param string) bool {
	for i := range os.Args {
		if os.Args[i] == param {
			return true
		}
	}
	return false
}

func printInTerminal(img image.Image, jump int, index int) {
	logIfVerbose(DEBUG, "printInTerminal[ %v ]", jump)
	bounds := img.Bounds()
	changedImage := image.NewPaletted(bounds, palette.Plan9)
	draw.Draw(changedImage, changedImage.Rect, img, bounds.Min, draw.Src)
	printedText := "\n"
	if hasParam("pixel") {
		jump = 1
	}
	for y := bounds.Min.Y; y < bounds.Max.Y; y += jump {
		for x := bounds.Min.X; x < bounds.Max.X; x += jump {
			colorA := changedImage.ColorIndexAt(x, y)
			printedText += "\033[48;5;" + strconv.Itoa(int(colorA)) + "m  "
		}
		printedText += "\033[0;00m\n"
	}
	log.Print(printedText)
	strSuffix := ""
	if param(3) > 1 {
		strSuffix = strconv.Itoa(index + 1)
	}
	saveStr(printedText, strSuffix)
}

func initLogLevel() {
	if hasParam("log") {
		LogLevel = INFO
	}
	if hasParam("verb") {
		LogLevel = DEBUG
	}
}

func logIfVerbose(level int, str string, obj ...interface{}) {
	if LogLevel == DEBUG || (LogLevel == INFO && level == DEBUG) {
		print(str, obj...)
	}
}

func print(str string, obj ...interface{}) {
	if len(obj) == 0 {
		log.Print(str)
	} else {
		log.Printf(str, obj...)
	}
}

func logIfExists(obj interface{}) {
	if obj != nil {
		log.Print(obj)
	}
}

func printManual() {
	logIfVerbose(DEBUG, "printManual")
	log.Print("Basic syntax : " + os.Args[0] + " [imgName] [X] [Y] [Z] [...]")
	log.Print("Alt. syntax : " + os.Args[0] + " [first-hand argument]")
	log.Print("imgName : Name of the file.")
	log.Print("X : Optional - Pixelization level.")
	log.Print("Y : Optional - Number of results with increasing pixelization.")
	log.Print("Z : Optional - Pixelization level increase between each result.")
	log.Print("... : Optional - Secondary arguments in no particular order.")
	log.Print("X, Y and Z will be 1 by default if not set.")
	log.Print("-----------------------------------")
	log.Print("First-hand arguments :")
	log.Print("- 'man' or 'help' or nothing : Prints the manual.")
	log.Print("- 'clear' : Removes every file generated by the program in the directory.")
	log.Print("- 'redo' : Relaunches the command with the last parameters used with the program.")
	log.Print("-----------------------------------")
	log.Print("Secondary arguments :")
	log.Print("- 'pixel' : Reduce the size of the image so each pixelized group of colors will display as a pixel.")
	log.Print("- 'print' : Print each result in the terminal, and save a print.log file containing the color codes of the last result.")
	log.Print("- 'gif' : Adds a gif file to the outputs, containing each result as a frame. Ignored if 'pixel' is used too.")
	log.Print("- 'reverse' : Reverses the gif images' order.")
	log.Print("- 'full' : Adds the reverted version to the original gif, instead of replacing the original.")
	log.Print("- 'verb' : Log all operations of the program (heavy logging).")
	log.Print("- 'log' : Lighter logging, focusing on the essential.")
}
